Microsoft Windows [Version 6.3.9600]
(c) 2013 Microsoft Corporation. All rights reserved.

D:\PPT>cd python\hands

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import xml.etree.ElementTree as ET
>>> tr = ET.parse(r"data\example.xml")
>>> r = tr.getroot()
>>> r.tag
'data'
>>> r.attrib
{}
>>> r.text
'\n    '
>>> type({})
<class 'dict'>
>>> type(set())
<class 'set'>
>>> nn = r.findall("./country/rank")
>>> nn
[<Element 'rank' at 0x000000C0B9F13EF8>, <Element 'rank' at 0x000000C0B9F15138>,
 <Element 'rank' at 0x000000C0B9F152C8>]
>>> type(nn)
<class 'list'>
>>> type(nn[0])
<class 'xml.etree.ElementTree.Element'>
>>> nn[0].text
'1'
>>> [n.text  for n in nn]
['1', '4', '68']
>>> res = []
>>> for n in nn:
...     res.append(n.text)
...
>>> res
['1', '4', '68']
>>> [int(n.text)  for n in nn]
[1, 4, 68]
>>> nn = r.findall("./country")
>>> [n.attrib['name']  for n in nn]
['Liechtenstein', 'Singapore', 'Panama']
>>> res = []
>>> for n in nn:
...     res.append(n.attrib['name'])
...
>>> res
['Liechtenstein', 'Singapore', 'Panama']
>>> #{'Liechtenstein': ["Austria", "Switzerland"], ....}
...
>>> quit()

D:\PPT\python\hands>pyhon
'pyhon' is not recognized as an internal or external command,
operable program or batch file.

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import pkg.mex
>>> pkg.mex.square(10)
100
>>> from pkg.mex import square
>>> square(10)
100
>>> import pkg.mex as p
>>> p.square(10)
100
>>> help(pkg.mex.square)
Help on function square in module pkg.mex:

square(x)
    Square function
    squares a number

>>> import sys
>>> sys.path
['', 'C:\\Python35\\python35.zip', 'C:\\Python35\\DLLs', 'C:\\Python35\\lib', 'C
:\\Python35', 'C:\\Python35\\lib\\site-packages', 'C:\\Python35\\lib\\site-packa
ges\\win32', 'C:\\Python35\\lib\\site-packages\\win32\\lib', 'C:\\Python35\\lib\
\site-packages\\Pythonwin']
>>> import doctest
>>> dir(doctest)
['BLANKLINE_MARKER', 'COMPARISON_FLAGS', 'DONT_ACCEPT_BLANKLINE', 'DONT_ACCEPT_T
RUE_FOR_1', 'DebugRunner', 'DocFileCase', 'DocFileSuite', 'DocFileTest', 'DocTes
t', 'DocTestCase', 'DocTestFailure', 'DocTestFinder', 'DocTestParser', 'DocTestR
unner', 'DocTestSuite', 'ELLIPSIS', 'ELLIPSIS_MARKER', 'Example', 'FAIL_FAST', '
IGNORE_EXCEPTION_DETAIL', 'NORMALIZE_WHITESPACE', 'OPTIONFLAGS_BY_NAME', 'Output
Checker', 'REPORTING_FLAGS', 'REPORT_CDIFF', 'REPORT_NDIFF', 'REPORT_ONLY_FIRST_
FAILURE', 'REPORT_UDIFF', 'SKIP', 'SkipDocTestCase', 'StringIO', 'TestResults',
'UnexpectedException', '_DocTestSuite', '_OutputRedirectingPdb', '_SpoofOut', '_
TestClass', '__all__', '__builtins__', '__cached__', '__doc__', '__docformat__',
 '__file__', '__future__', '__loader__', '__name__', '__package__', '__spec__',
'__test__', '_comment_line', '_ellipsis_match', '_exception_traceback', '_extrac
t_future_flags', '_indent', '_load_testfile', '_module_relative_path', '_normali
ze_module', '_strip_exception_details', '_test', '_unittest_reportflags', 'argpa
rse', 'debug', 'debug_script', 'debug_src', 'difflib', 'inspect', 'linecache', '
master', 'namedtuple', 'os', 'pdb', 're', 'register_optionflag', 'run_docstring_
examples', 'script_from_examples', 'set_unittest_reportflags', 'sys', 'testfile'
, 'testmod', 'testsource', 'traceback', 'unittest']
>>> quit()

D:\PPT\python\hands>python pkg\mex.py -v
Trying:
    square(10)
Expecting:
    100
ok
Trying:
    square(0)
Expecting:
    0
ok
1 items had no tests:
    __main__
1 items passed all tests:
   2 tests in __main__.square
2 tests in 2 items.
2 passed and 0 failed.
Test passed.

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import pkg.mex
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import pkg.mex
testing
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import pkg.mex
>>> quit()

D:\PPT\python\hands>python pkg\mex.py -v
testing
Trying:
    square(10)
Expecting:
    100
ok
Trying:
    square(0)
Expecting:
    0
ok
1 items had no tests:
    __main__
1 items passed all tests:
   2 tests in __main__.square
2 tests in 2 items.
2 passed and 0 failed.
Test passed.

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import pkg.mex
>>> pkg.mex.__dict__['__name__']
'pkg.mex'
>>> def f(x,y):
...     return x+y
...
>>> f(2,3)
5
>>> f(y=3, x=2)
5
>>> f(2, y=3)
5
>>> def g(x, y=10):
...     return x+y
...
>>> g(2)
12
>>> g(2,3)
5
>>> sum([1,2,3])
6
>>> def mysum(lst):
...     res = 0
...     for e in lst:
...             res +=e
...     return res
...
>>> mysum([1,2,3])
6
>>> def mysum2(lst):
...     return 0 if not lst else lst[0]+mysum2(lst[1:])
...
>>> mysum2([1,2,3])
6
>>> def f(x):
...     def g(y):
...             return x_y
...     return g(x)
...
>>> def f(x):
...     def g(y):
...             return x+y
...     return g(x)
...
>>> f(2)
4
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> def p(x):
...     print(x+y)
...
>>> p(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in p
NameError: name 'y' is not defined
>>> y = 20
>>> p(2)
22
>>>
>>> l = [1,2,3]
>>> for e in l:
...     print(e)
...
1
2
3
>>> print(e)
3
>>> len = 20
>>>
>>> s = "OK"
>>> s2 = s + " NOK"
>>> s2
'OK NOK'
>>> len(s2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not callable
>>> del len
>>> len(s2)
6
>>> vars()
{'__loader__': <class '_frozen_importlib.BuiltinImporter'>, 'e': 3, 'y': 20, 'l'
: [1, 2, 3], 'p': <function p at 0x000000A195167F28>, '__name__': '__main__', 's
2': 'OK NOK', '__builtins__': <module 'builtins' (built-in)>, '__spec__': None,
's': 'OK', '__package__': None, '__doc__': None}
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import pkg.mex
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "D:\PPT\python\hands\pkg\mex.py", line 38
    returns dict with key as element and value is count
    ^
IndentationError: unexpected indent
>>> import pkg.mex
>>> pkg.mex.sd([1,2,3])
0.816496580927726
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import pkg.mex
>>> D1 = {'ok': 1, 'nok': 2}
>>> D2 = {'ok': 2, 'new':3 }
>>> pkg.mex.merge(D1, D2)
{'ok': 3, 'nok': 2, 'new': 3}
>>>
>>>
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import pkg.mex
>>> D1 = {'ok': 1, 'nok': 2}
>>> D2 = {'ok': 2, 'new':3 }
>>> def add(x,y):
...     return x+y
...
>>> pkg.mex.merge(D1, D2, add)
{'ok': 3, 'new': 3, 'nok': 2}
>>> add
<function add at 0x00000085A5387F28>
>>> add(1,2)
3
>>> pkg.mex.merge(D1, D2, lambda x,y : x+y)
{'ok': 3, 'new': 3, 'nok': 2}
>>>
>>> add1 = lambda x,y : x+y
>>> add1(2,3)
5
>>> pkg.mex.merge(D1, D2, lambda x,y : x-y)
{'ok': -1, 'new': 3, 'nok': 2}
>>> pkg.mex.merge(D1, D2, lambda x,y : x*y)
{'ok': 2, 'new': 3, 'nok': 2}
>>> pkg.mex.merge(D1, D2, lambda x,y : x/y)
{'ok': 0.5, 'new': 3, 'nok': 2}
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import pkg.mex
>>> D1 = {'ok': 1, 'nok': 2}
>>> D2 = {'ok': 2, 'new':3 }
>>> pkg.mex.merge(D1, D2)
{'nok': 2, 'ok': 3, 'new': 3}
>>> pkg.mex.merge(D1, D2, lambda x,y : x*y)
{'nok': 2, 'ok': 2, 'new': 3}
>>> import operator
>>> dir(operator)
['__abs__', '__add__', '__all__', '__and__', '__builtins__', '__cached__', '__co
ncat__', '__contains__', '__delitem__', '__doc__', '__eq__', '__file__', '__floo
rdiv__', '__ge__', '__getitem__', '__gt__', '__iadd__', '__iand__', '__iconcat__
', '__ifloordiv__', '__ilshift__', '__imatmul__', '__imod__', '__imul__', '__ind
ex__', '__inv__', '__invert__', '__ior__', '__ipow__', '__irshift__', '__isub__'
, '__itruediv__', '__ixor__', '__le__', '__loader__', '__lshift__', '__lt__', '_
_matmul__', '__mod__', '__mul__', '__name__', '__ne__', '__neg__', '__not__', '_
_or__', '__package__', '__pos__', '__pow__', '__rshift__', '__setitem__', '__spe
c__', '__sub__', '__truediv__', '__xor__', '_abs', 'abs', 'add', 'and_', 'attrge
tter', 'concat', 'contains', 'countOf', 'delitem', 'eq', 'floordiv', 'ge', 'geti
tem', 'gt', 'iadd', 'iand', 'iconcat', 'ifloordiv', 'ilshift', 'imatmul', 'imod'
, 'imul', 'index', 'indexOf', 'inv', 'invert', 'ior', 'ipow', 'irshift', 'is_',
'is_not', 'isub', 'itemgetter', 'itruediv', 'ixor', 'le', 'length_hint', 'lshift
', 'lt', 'matmul', 'methodcaller', 'mod', 'mul', 'ne', 'neg', 'not_', 'or_', 'po
s', 'pow', 'rshift', 'setitem', 'sub', 'truediv', 'truth', 'xor']
>>> pkg.mex.merge(D1, D2, operator.mul)
{'nok': 2, 'ok': 2, 'new': 3}
>>> pkg.mex.merge(D1, D2, operator.mul)\\\\\\\
  File "<stdin>", line 1
    pkg.mex.merge(D1, D2, operator.mul)\\\\\\\
                                             ^
SyntaxError: unexpected character after line continuation character
>>> help(pkg.mex.merge)
Help on function merge in module pkg.mex:

merge(in1, in2, op=<function <lambda> at 0x000000467A92C268>)
    in1, in2 are dict, values are added for same keys
    Given:
    D1 = {'ok': 1, 'nok': 2}
    D2 = {'ok': 2, 'new':3 }
    returns  { 'ok': 3, 'nok': 2 , 'new':3  }

>>> f = lambda x,y : x+y
>>>
>>> type(f)
<class 'function'>
>>> type(add)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'add' is not defined
>>> def add(x,y):
...     return x+y
...
>>> type(add)
<class 'function'>
>>>
>>> def g(a, b=0, *c):
...     return [a,b,c]
...
>>> g(1)
[1, 0, ()]
>>> g(1,2,3)
[1, 2, (3,)]
>>> g(1,2)
[1, 2, ()]
>>> g(1,2,3,4,5,6)
[1, 2, (3, 4, 5, 6)]
>>> l = [1,2,3]
>>> g(1,2,*l)
[1, 2, (1, 2, 3)]
>>> g(*l)
[1, 2, (3,)]
>>> import time
>>> time.sleep(10)
>>> None == None
True
>>> None is None
True
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from pkg.mex import execute_and_watchdog
>>> command ="tracert www.google.co.in"
>>> execute_and_watchdog(command, 2)
(1, '\nTracing route to www.google.co.in [172.217.26.163]\nover a maximum of 30
hops:\n\n  1    <1 ms    <1 ms    <1 ms  dlinkrouter.Dlink [192.168.0.1] \n  2
   1 ms     2 ms     2 ms  10.201.119.1 \n  3     1 ms     1 ms     1 ms  203.92
.63.177.reverse.spectranet.in [203.92.63.177] \n  4    10 ms     9 ms     9 ms
203.92.63.134.reverse.spectranet.in [203.92.63.134] \n  5    55 ms    55 ms    5
6 ms  180.151.59.26.reverse.spectranet.in [180.151.59.26] \n  6    55 ms    55 m
s    56 ms  108.170.253.113 \n  7    32 ms    32 ms    32 ms  74.125.253.65 \n
8    49 ms    50 ms    49 ms  maa03s22-in-f3.1e100.net [172.217.26.163] \n\nTrac
e complete.\n', '')
>>> execute_and_watchdog(command, 2, 1)
(1, '\nTracing route to www.google.co.in [172.217.167.131]\nover a maximum of 30
 hops:\n\n  1    <1 ms     1 ms    <1 ms  dlinkrouter.Dlink [192.168.0.1] \n  2
    1 ms     1 ms     1 ms  10.201.119.1 \n  3     1 ms     1 ms     1 ms  203.9
2.63.177.reverse.spectranet.in [203.92.63.177] \n  4    10 ms     9 ms     9 ms
 203.92.63.134.reverse.spectranet.in [203.92.63.134] \n  5    56 ms    59 ms
55 ms  180.151.59.26.reverse.spectranet.in [180.151.59.26] \n  6    34 ms    32
ms    32 ms  108.170.253.113 \n  7    26 ms    26 ms    26 ms  216.239.43.173 \n
  8    28 ms    29 ms    28 ms  maa03s26-in-f3.1e100.net [172.217.167.131] \n\nT
race complete.\n', '')
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from pkg.mex import execute_and_watchdog
>>> command ="tracert www.google.co.in"
>>> execute_and_watchdog(command, 2, 1)
killing...
(1, '\nTracing route to www.google.co.in [172.217.167.131]\nover a maximum of 30
 hops:\n\n  1    <1 ms     1 ms     1 ms  dlinkrouter.Dlink [192.168.0.1] \n  2
    1 ms     1 ms     1 ms  10.201.119.1 \n  3     2 ms     2 ms     2 ms  203.9
2.63.177.reverse.spectranet.in [203.92.63.177] \n  4     9 ms     9 ms     9 ms
 203.92.63.134.reverse.spectranet.in [203.92.63.134] \n  5    56 ms    55 ms
55 ms  180.151.59.26.reverse.spectranet.in [180.151.59.26] \n  6    33 ms    32
ms    32 ms  108.170.253.113 \n  7    27 ms    26 ms    26 ms  216.239.43.173 \n
  8    29 ms    29 ms    29 ms  maa03s26-in-f3.1e100.net [172.217.167.131] \n\nT
race complete.\n', '')
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from pkg.mex import execute_and_watchdog
>>> command ="tracert www.google.co.in"
>>> execute_and_watchdog(command, 2, 1)
killing...
(-9, '', '')
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from pkg.mex import execute_and_watchdog
>>> command ="tracert www.google.co.in"
>>> execute_and_watchdog(command, 2, 1)
Terminating...
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "D:\PPT\python\hands\pkg\mex.py", line 117, in execute_and_watchdog
    if test_d(proc.pid):
  File "D:\PPT\python\hands\pkg\mex.py", line 103, in test_d
    os.kill(pid, 0)
NameError: name 'os' is not defined
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from pkg.mex import execute_and_watchdog
>>> command ="tracert www.google.co.in"
>>> execute_and_watchdog(command, 2, 1)
Terminating...
Killing...
(-9, '', '')
>>> execute_and_watchdog(command)
Terminating...
Killing...
(-9, '', '')
>>> execute_and_watchdog(command,60)
(0, '\nTracing route to www.google.co.in [172.217.167.131]\nover a maximum of 30
 hops:\n\n  1    <1 ms    <1 ms    <1 ms  dlinkrouter.Dlink [192.168.0.1] \n  2
    1 ms     1 ms     1 ms  10.201.119.1 \n  3     1 ms    32 ms     1 ms  203.9
2.63.177.reverse.spectranet.in [203.92.63.177] \n  4     9 ms     9 ms     9 ms
 203.92.63.134.reverse.spectranet.in [203.92.63.134] \n  5    33 ms    33 ms
33 ms  180.151.59.26.reverse.spectranet.in [180.151.59.26] \n  6    32 ms    32
ms    31 ms  108.170.253.113 \n  7    32 ms    26 ms    27 ms  216.239.43.173 \n
  8    29 ms    28 ms    28 ms  maa03s26-in-f3.1e100.net [172.217.167.131] \n\nT
race complete.\n', '')
>>> execute_and_watchdog(command)
Terminating...
Killing...
(-9, '', '')
>>>



###mex.py 
import math 

def square(x):
    """Square function 
    squares a number 
    
    >>> square(10)
    100
    
    >>> square(0)
    0
    """
    z = x*x 
    return z 
    
    
def mean(lst) :
    """
    Sum of lst/length of lst 
    """
    return sum(lst)/len(lst)

def sd1(lst):
    """
    sqrt of( SUM of square of ( each elemnt - mean)  / length of lst  )
    sqrt is in math 
    """
    res1 = 0
    res2 = 0
    for i in lst:
        res1 = i - mean(lst)
        res2 = res2 + res1*res1 
    res3 = res2/len(lst)
    return math.sqrt(res3)
    
def sd(lst):
    """
    sqrt of( SUM of square of ( each elemnt - mean)  / length of lst  )
    sqrt is in math 
    """
    m = mean(lst)
    lst1 = [ square(e-m) for e in lst]
    return math.sqrt(sum(lst1)/len(lst))

def freq(lst):
    """
    returns dict with key as element and value is count 
    """
    d = {}
    for e in s:
        if e not in d:
            d[e] = 1
        else: 
            d[e] += 1      
    return d  
    
def freq1(lst):
    return {e : lst.count(e) for e in lst}
    

def merge(in1,in2, op=lambda x,y: x+y):
    """
    in1, in2 are dict, values are added for same keys
    Given:
    D1 = {'ok': 1, 'nok': 2}
    D2 = {'ok': 2, 'new':3 }
    returns  { 'ok': 3, 'nok': 2 , 'new':3  }
    """
    result_dict = in1.copy()
    for k in in2:
        if k in in1:
            result_dict[k] = op(in1[k],in2[k])
        else:
            result_dict[k] = in2[k]
    return result_dict
    
    
def checksum(string):
    """
    Using recursion 
    Take two two character(one byte) from above (which are in hex digit )
    Convert to int  (Hint: use int function with base)
    Sum all and then find mod with 255, that is your checksum 
    Test with input="ABCDEF1234567890"  
    """
    def hex_sum(lst):
        return 0 if not lst else int(lst[0:2], base=16) + hex_sum(lst[2:])
    return hex_sum(string) % 255 


def execute_and_watchdog(command, TIMEOUT=15, WAIT_FOR_KILL=60):
    """
    Execute the command and keep on polling to check command is completed within TIMEOUT 
    If not, manually kill that and then sleep for WAIT_FOR_KILL
    Use proc.poll(), proc.pid, proc.kill() etc 
    check subprocess reference     
    Hint:  os.kill(pid, 0) if raises exception, then process does not exist
    Use below function which handles the exception 
    """
    import errno, subprocess as S , os, time 
    def test_d(pid):
        try:
            os.kill(pid, 0)
        except OSError as err:
            if err.errno == errno.ESRCH:
                return False
        return True        
    proc = S.Popen(command, shell=True,stdout=S.PIPE, stderr=S.PIPE,universal_newlines=True)
    timeout = TIMEOUT 
    while proc.poll() is None and timeout > 0:
        time.sleep(1)
        timeout -= 1
    if timeout == 0 and proc.poll() is None:
        print("Terminating...")
        proc.terminate()
        time.sleep(WAIT_FOR_KILL)
        if test_d(proc.pid):
            print("Killing...")
            proc.kill()
            time.sleep(WAIT_FOR_KILL)
        return (-9, "", "")
    stdout, stderr = proc.communicate()
    return (proc.returncode, stdout, stderr)
    
        
def msglog(message, file=True):
    """
    write mslog with takes any message and dumps that message to LOGFILE (if file is True)
    and console with below format 
    HOST:DT:message   
    message may contain any env var and that should be expanded 
    Note LOGFILE, HOST, come from env var, but if not set, use some default 
    DT is can be from  str(datetime.datetime.now())
    """
    pass
        
        
        
if __name__ == '__main__':
    print("testing")
    import doctest
    doctest.testmod()
    