Microsoft Windows [Version 6.3.9600]
(c) 2013 Microsoft Corporation. All rights reserved.

D:\PPT>cd python\hands

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> a = 1
>>> type(a)
<class 'int'>
>>> f = 1.2
>>> type(f)
<class 'float'>
>>> s = "OK"
>>> type(s)
<class 'str'>
>>> b = True
>>> type(b)
<class 'bool'>
>>> from __future__ import print_function, division
>>> s == "OK"
True
>>> a + 1
2
>>> a / 2
0.5
>>> a // 2
0
>>> a % 2
1
>>> a == 1
True
>>> a == 1 and a > 1
False
>>> a == 1 or a > 1
True
>>> not a > 1
True
>>> if a == 1:
...     print(a)
...
1
>>> if a == 1:
...     print(a)
... elif a > 1:
...     print(a)
... else:
...     print(a)
...
1
>>> if a == 1:
...     print(a)
...     print(a)
...     print(a)
...
1
1
1
>>> quit()

D:\PPT\python\hands>dir
 Volume in drive D is Data
 Volume Serial Number is 1A08-0D68

 Directory of D:\PPT\python\hands

14-05-2018  11:36    <DIR>          .
14-05-2018  11:36    <DIR>          ..
14-05-2018  11:37                86 first.py
               1 File(s)             86 bytes
               2 Dir(s)  191,528,316,928 bytes free

D:\PPT\python\hands>python first.py Hello
Hello

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> s = "1"
>>> a = 1
>>> type(s)
<class 'str'>
>>> type(a)
<class 'int'>
>>> int(s)
1
>>> str(a)
'1'
>>> s = "OK"
>>> s = 'OK'
>>> s = """Hello
... World"""
>>> s
'Hello \nWorld'
>>> len(s)
12
>>> "He" in s
True
>>> "He" not in s
False
>>> s == "OK"
False
>>> s != "OK"
True
>>> for ch in s:
...     print(ch)
...
H
e
l
l
o



W
o
r
l
d
>>> print(1, "OK", 2.3)
1 OK 2.3
>>>
>>> quit()

D:\PPT\python\hands>python first.py
  File "first.py", line 11
    ....
       ^
SyntaxError: invalid syntax

D:\PPT\python\hands>python first.py
H - 1
e - 1
l - 3
l - 3
o - 2
  - 1
W - 1
o - 2
r - 1
l - 3
d - 1

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> s = "Hello World"
>>> len(s)
11
>>> "He" in s
True
>>> s[0]
'H'
>>> s[len(s)-1]
'd'
>>> s[-1]
'd'
>>> s[0] = 'K'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> s[0:5:2] # start:end:step
'Hlo'
>>> s[0],s[0+2],s[2+2], #s[4+2]
('H', 'l', 'o')
>>> s[0:2:1]
'He'
>>> s[0:2]
'He'
>>> s[:2]
'He'
>>> s[:]
'Hello World'
>>> s[8:2:-1]
'roW ol'
>>> s[::-1]
'dlroW olleH'
>>> s
'Hello World'
>>> for ch in s[::2]:
...     print(ch)
...
H
l
o
W
r
d
>>> s[2:-2]
'llo Wor'
>>> s
'Hello World'
>>> s[8:2:-1]
'roW ol'
>>> s[8],s[8-1],s[7-1],#s[3-1]
('r', 'o', 'W')
>>> s
'Hello World'
>>> s2 = s +  " OK"
>>> s2
'Hello World OK'
>>> s
'Hello World'
>>> "ok" * 4
'okokokok'
>>> "id=%d, name=%s" % ( 1, "XYZ")
'id=1, name=XYZ'
>>> s
'Hello World'
>>> type(s)
<class 'str'>
>>> dir(str
... )
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__'
, '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__r
epr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subcl
asshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', '
expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isd
ecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'issp
ace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'pa
rtition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip
', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate
', 'upper', 'zfill']
>>> import sys
>>> dir(sys)
['__displayhook__', '__doc__', '__excepthook__', '__interactivehook__', '__loade
r__', '__name__', '__package__', '__spec__', '__stderr__', '__stdin__', '__stdou
t__', '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe',
'_home', '_mercurial', '_xoptions', 'api_version', 'argv', 'base_exec_prefix', '
base_prefix', 'builtin_module_names', 'byteorder', 'call_tracing', 'callstats',
'copyright', 'displayhook', 'dllhandle', 'dont_write_bytecode', 'exc_info', 'exc
epthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_rep
r_style', 'get_coroutine_wrapper', 'getallocatedblocks', 'getcheckinterval', 'ge
tdefaultencoding', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', '
getrefcount', 'getsizeof', 'getswitchinterval', 'gettrace', 'getwindowsversion',
 'hash_info', 'hexversion', 'implementation', 'int_info', 'intern', 'is_finalizi
ng', 'last_traceback', 'last_type', 'last_value', 'maxsize', 'maxunicode', 'meta
_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'pre
fix', 'ps1', 'ps2', 'set_coroutine_wrapper', 'setcheckinterval', 'setprofile', '
setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout'
, 'thread_info', 'version', 'version_info', 'warnoptions', 'winver']
>>> sys.version
'3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)]'

>>> s[8:9:-1]
''
>>> s[8:9:1]
'r'
>>> s
'Hello World'
>>> type(s)
<class 'str'>
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__'
, '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__r
epr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subcl
asshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', '
expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isd
ecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'issp
ace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'pa
rtition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip
', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate
', 'upper', 'zfill']
>>> help(str.split)
Help on method_descriptor:

split(...)
    S.split(sep=None, maxsplit=-1) -> list of strings

    Return a list of the words in S, using sep as the
    delimiter string.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator and empty strings are
    removed from the result.

>>> s.split()
['Hello', 'World']
>>> "A,b,c".split(",")
['A', 'b', 'c']
>>> help(str.strip)
Help on method_descriptor:

strip(...)
    S.strip([chars]) -> str

    Return a copy of the string S with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.

>>> l = [1, "OK", 2.3, [1,2,3]]
>>> type(l)
<class 'list'>
>>> list("OK")
['O', 'K']
>>> len(l)
4
>>> "OK" in l
True
>>> "OK" not in l
False
>>> l == [1,2]
False
>>> for e in l:
...     print(e)
...
1
OK
2.3
[1, 2, 3]
>>> int("1")
1
>>> l[0]
1
>>> l[-1]
[1, 2, 3]
>>> l[-1] = 20
>>> l
[1, 'OK', 2.3, 20]
>>> help(str.replace)
Help on method_descriptor:

replace(...)
    S.replace(old, new[, count]) -> str

    Return a copy of S with all occurrences of substring
    old replaced by new.  If the optional argument count is
    given, only the first count occurrences are replaced.

>>> l
[1, 'OK', 2.3, 20]
>>> l2 = l + [23,34]
>>> l2
[1, 'OK', 2.3, 20, 23, 34]
>>> l
[1, 'OK', 2.3, 20]
>>> l.append(30)
>>> l
[1, 'OK', 2.3, 20, 30]
>>> l += [34,45]
>>> l
[1, 'OK', 2.3, 20, 30, 34, 45]
>>> l.append([30,30,40])
>>> l
[1, 'OK', 2.3, 20, 30, 34, 45, [30, 30, 40]]
>>> l.append(30,30,40)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: append() takes exactly one argument (3 given)
>>> help(list.append)
Help on method_descriptor:

append(...)
    L.append(object) -> None -- append object to end

>>> l += [34,[45]]
>>> l
[1, 'OK', 2.3, 20, 30, 34, 45, [30, 30, 40], 34, [45]]
>>> l2 = l + [23,34]
>>> l = l2
>>> l
[1, 'OK', 2.3, 20, 30, 34, 45, [30, 30, 40], 34, [45], 23, 34]
>>> s = 1
>>> s = "OK"
>>> l = []
>>> l = [1,2,3,4]
>>> res = [1,4,9,16]
>>> e = 2
>>> e % 2 == 0
True
>>> e % 2 == 1
False
>>> s = '[1,2,3,4]'
>>> type(s)
<class 'str'>
>>> l = [1,2,3,4]
>>> type(l)
<class 'list'>
>>> type(l[0])
<class 'int'>
>>> s
'[1,2,3,4]'
>>> s1 = s.strip('[]')
>>> s1
'1,2,3,4'
>>> s2 = s1.split(',')
>>> s2
['1', '2', '3', '4']
>>> res = []
>>> for e in s2:
...     res.append(int(e))
...
>>> res
[1, 2, 3, 4]
>>> res = []
>>> for e in s.strip('[]').split(','):
...     res.append(int(e))
...
>>> res
[1, 2, 3, 4]
>>> res = []
>>> for e in list(s):
...     if e not in "[],":
...             res.append(int(e))
...
>>> res
[1, 2, 3, 4]
>>> list(s)
['[', '1', ',', '2', ',', '3', ',', '4', ']']
>>> l = [1,2,3]
>>> l[::-1]
[3, 2, 1]
>>> res = []
>>> for e in list(s)[1:-1:2]:
...     res.append(int(e))
...
>>> res
[1, 2, 3, 4]
>>> l = list(range(10))
>>> l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> l = list(range(1,10,2))
>>> l
[1, 3, 5, 7, 9]
>>> l[::-1]
[9, 7, 5, 3, 1]
>>> l[::2]
[1, 5, 9]
>>> l[:0] = [22,33]
>>> l
[22, 33, 1, 3, 5, 7, 9]
>>> l[len(l):] = [44,55]
>>> l
[22, 33, 1, 3, 5, 7, 9, 44, 55]
>>> l[2:2] = [88,99]
>>> l
[22, 33, 88, 99, 1, 3, 5, 7, 9, 44, 55]
>>> l[2:3] = ["OK"]
>>> l
[22, 33, 'OK', 99, 1, 3, 5, 7, 9, 44, 55]
>>> l[0:5] = [56]
>>> l = [22, 33, 'OK', 99, 1, 3, 5, 7, 9, 44, 55]
>>> l[0:5]
[22, 33, 'OK', 99, 1]
>>> l[0:5] = [56]
>>> l
[56, 3, 5, 7, 9, 44, 55]
>>> l
[56, 3, 5, 7, 9, 44, 55]
>>> l[2:2]
[]
>>> l[2:]
[5, 7, 9, 44, 55]
>>>
>>> help(range)
Help on class range in module builtins:

class range(object)
 |  range(stop) -> range object
 |  range(start, stop[, step]) -> range object
 |
 |  Return an object that produces a sequence of integers from start (inclusive)
 |  to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
 |  start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
 |  These are exactly the valid indices for a list of 4 elements.
 |  When step is given, it specifies the increment (or decrement).
 |
 |  Methods defined here:
 |
 |  __contains__(self, key, /)
 |      Return key in self.
 |
 |  __eq__(self, value, /)
 |      Return self==value.
 |
 |  __ge__(self, value, /)
 |      Return self>=value.

>>> lt = [1,2,3]
>>> c = 0
>>> while c < 3:
...     lt = [lt]
...     c +=1
...
>>> lt
[[[[1, 2, 3]]]]
>>> type(lt)
<class 'list'>
>>> len(lt)
1
>>> lt[0]
[[[1, 2, 3]]]
>>> type(lt[0])
<class 'list'>
>>> len(lt[0])
1
>>> lt[0][0]
[[1, 2, 3]]
>>> lt[0][0][0]
[1, 2, 3]
>>> lt[0][0][0][-1]
3
>>> lt[0][0][0][-1] = 30
>>> l = [1,2,3]
>>> l[0]
1
>>> dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__'
, '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__'
, '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__'
, '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_e
x__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__s
izeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'ex
tend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> l = [1,2,3]
>>> l2 = [l,l,l]
>>> l2
[[1, 2, 3], [1, 2, 3], [1, 2, 3]]
>>> l[-1][-1] = 30
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object does not support item assignment
>>> l2[-1][-1] = 30
>>> l2
[[1, 2, 30], [1, 2, 30], [1, 2, 30]]
>>> l
[1, 2, 30]
>>> l2 = [l.copy(),l[:],l[:]]
>>> l2
[[1, 2, 30], [1, 2, 30], [1, 2, 30]]
>>> l
[1, 2, 30]
>>> l2[-1][-1] = 300
>>> l2
[[1, 2, 30], [1, 2, 30], [1, 2, 300]]
>>> l
[1, 2, 30]
>>> t = (1,2,3)
>>> t2 = (t,t,t)
>>> t2
((1, 2, 3), (1, 2, 3), (1, 2, 3))
>>> t
(1, 2, 3)
>>> t[-1] = 20
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> t
(1, 2, 3)
>>> len(t)
3
>>> 3 in t
True
>>> t == (1,2)
False
>>> for e in t:
...     print(e)
...
1
2
3
>>> dir(tuple)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__'
, '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__
rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'i
ndex']
>>> dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__'
, '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__'
, '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__'
, '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_e
x__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__s
izeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'ex
tend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> tuple([1,2,3])
(1, 2, 3)
>>> list(tuple([1,2,3]))
[1, 2, 3]
>>> (1,1,1,13)
(1, 1, 1, 13)
>>> set(t)
{1, 2, 3}
>>> list(set(t))
[1, 2, 3]
>>> s = {4,3,1,2}
>>> type(s)
<class 'set'>
>>> es = set()
>>> type(es)
<class 'set'>
>>> len(s)
4
>>> 3 in s
True
>>> 3 not in s
False
>>> s == {4,1,2,3}
True
>>> s
{1, 2, 3, 4}
>>> for e in s:
...     print(e)
...
1
2
3
4
>>> s[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'set' object does not support indexing
>>> s.append(20)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'set' object has no attribute 'append'
>>> s.add(20)
>>> s1 = {1,2,3}
>>> s2 = { 3,4,5}
>>> s1 | s2
{1, 2, 3, 4, 5}
>>> s1 & s2
{3}
>>> s1 - s2
{1, 2}
>>> s1 ^ s2
{1, 2, 4, 5}
>>> (s1-s2) | (s2-s1)
{1, 2, 4, 5}
>>> l
[1, 2, 30]
>>> del l[0]
>>> l
[2, 30]
>>> s = "OK"
>>> rs = r"OK"
>>> ru = u"OK"
>>> rb = b"OK"
>>> type(s), type(rs), type(ru), type(rb)
(<class 'str'>, <class 'str'>, <class 'str'>, <class 'bytes'>)
>>> len(r"\n")
2
>>> len("\n")
1
>>> s.encode("utf-8")
b'OK'
>>> s.encode("utf-8").decode("utf-8")
'OK'
>>> dir(bytes)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__'
, '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__r
epr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subcl
asshook__', 'capitalize', 'center', 'count', 'decode', 'endswith', 'expandtabs',
 'find', 'fromhex', 'hex', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower',
'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans'
, 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'r
strip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'tran
slate', 'upper', 'zfill']
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__'
, '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__r
epr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subcl
asshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', '
expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isd
ecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'issp
ace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'pa
rtition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip
', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate
', 'upper', 'zfill']
>>> set(dir(bytes)) - set(dir(str))
{'hex', 'fromhex', 'decode'}
>>> set(dir(str)) - set(dir(bytes))
{'isnumeric', 'encode', 'isdecimal', 'format_map', 'format', 'isidentifier', 'is
printable', 'casefold'}
>>> #List of 2 sets, each set of two elements
...
>>> [{1,2}, {2,3}]
[{1, 2}, {2, 3}]
>>> #set of 2 lists, each list of two elements
...
>>> {[1],[2]}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>>
>>> {1,1,1,2}
{1, 2}
>>> hash(1)
1
>>> hash("OK")
-3375226285019731669
>>> hash( (1,2))
3713081631934410656
>>> hash([1,2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> {(1,2),(1,2), (2,3)}
{(1, 2), (2, 3)}
>>> l = [1,2,3]
>>> {l,l,l}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> {{1,2}, {2,3}}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'set'
>>> {frozenset({1,2}), frozenset({2,3})}
{frozenset({1, 2}), frozenset({2, 3})}
>>>
>>> s = "Hello wrld"
>>> set(s)
{'l', 'o', 'w', 'r', 'H', 'e', 'd', ' '}
>>> list(s)
['H', 'e', 'l', 'l', 'o', ' ', 'w', 'r', 'l', 'd']
>>>


















































