Microsoft Windows [Version 6.3.9600]
(c) 2013 Microsoft Corporation. All rights reserved.

D:\PPT>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> quit()

D:\PPT>cd python

D:\PPT\python>mkdir hands

D:\PPT\python>cd hands

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> a = 1
>>> type(a)
<class 'int'>
>>> f = 1.2
>>> type(f)
<class 'float'>
>>> b = True
>>> type(b)
<class 'bool'>
>>> s = "OK"
>>> type(s)
<class 'str'>
>>> s , "s"
('OK', 's')
>>> a + 1
2
>>> a / 2
0.5
>>> a //2
0
>>> s == "NOK"
False
>>> a > 1
False
>>> a > 1 and a == 1
False
>>> a > 1 or a == 1
True
>>> not a > 1
True
>>> if a == 1:
...     print(a)
...
1
>>> if a == 1:
...     print(a)
...     print(a)
...     print(a)
...
1
1
1
>>> if a == 1:
...    print(a)
...    print(a)
... else:
...    print(a)
...
1
1
>>> if a == 1:
...    print(a)
... elif a > 1:
...    print(a)
... else:
...    print(a)
...
1
>>> quit()

D:\PPT\python\hands>dir
 Volume in drive D is Data
 Volume Serial Number is 1A08-0D68

 Directory of D:\PPT\python\hands

11-02-2019  10:42    <DIR>          .
11-02-2019  10:42    <DIR>          ..
11-02-2019  10:43                39 first.py
               1 File(s)             39 bytes
               2 Dir(s)  239,853,330,432 bytes free

D:\PPT\python\hands>python first.py Hello
Hello

D:\PPT\python\hands>python first.py Hello World
Hello World

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> s = "1"
>>> type(s)
<class 'str'>
>>> a = 1
>>> type(a)
<class 'int'>
>>> int(s)
1
>>> type(int(s))
<class 'int'>
>>> str(a)
'1'
>>> s = "OK"
>>> s = 'OK'
>>> s = """OK
... OK
... OK"""
>>> s
'OK\nOK\nOK'
>>> s = "Hello World"
>>> len(s)
11
>>> "He" in s
True
>>> "Hem" not in s
True
>>> s == "OK"
False
>>> for e in s:
...     print(e)
...
H
e
l
l
o

W
o
r
l
d
>>> for element in s:
...     print(element)
...
H
e
l
l
o

W
o
r
l
d
>>> s
'Hello World'
>>> s + " OK"
'Hello World OK'
>>> "OK" * 4
'OKOKOKOK'
>>> e = ""
>>> len(e)
0
>>> type(e)
<class 'str'>
>>> s
'Hello World'
>>> s = s + " OK"
>>> s
'Hello World OK'
>>> for i in range(0,3,1):
...     print(i)
...
0
1
2
>>> for i in range(3):
...     print(i)
...
0
1
2
>>> for i in range(3):
...     if i == 1:
...             break
...
>>> for i in range(3):
...     if i == 1:
...             break
...     else:
...             print(i)
...
0
>>> i = 30
>>> i % 2 == 0
True
>>> i % 2 == 1
False
>>> 5*5 == 3*3 + 4*4
True
>>> x = 10
>>> y = 20
>>> z = 30
>>> z > y and y > x
True
>>> z > y > x
True
>>> s = "OK"
>>> s[0]
'O'
>>> s = "Hello World"
>>> s[0]
'H'
>>> s[1]
'e'
>>> s[len(s)-1]
'd'
>>> s[-1]
'd'
>>> s[-3]
'r'
>>> s[0] = 'K'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> s1 = s + "OK"
>>> s
'Hello World'
>>> s1
'Hello WorldOK'
>>> s
'Hello World'
>>> s[0:7:2]  #start:end:step, end exclusive
'HloW'
>>>
>>> s[0], s[2], s[4], s[6], #s[8]
('H', 'l', 'o', 'W')
>>> s[7:0:-1]
'oW olle'
>>> s[7[,s[6],s[5], #...
  File "<stdin>", line 1
    s[7[,s[6],s[5], #...
        ^
SyntaxError: invalid syntax
>>> s[7],s[6],s[5], #...
('o', 'W', ' ')
>>> s[-4:-11:-1]
'oW olle'
>>> s[-4],s[-5],s[-6],s[-7], s[-8],s[-9],s[-10]
('o', 'W', ' ', 'o', 'l', 'l', 'e')
>>> s[-4], s[-6],s[-8],s[-10] #s[-4:-11:-2]
('o', ' ', 'l', 'e')
>>> s[-4:-11:2]
''
>>> s[::2]
'HloWrd'
>>> s
'Hello World'
>>> s[0:12:2]
'HloWrd'
>>> s[0:11:2]
'HloWrd'
>>> s[::-1]
'dlroW olleH'
>>> type(s)
<class 'str'>
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__'
, '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__r
epr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subcl
asshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', '
expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isd
ecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'issp
ace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'pa
rtition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip
', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate
', 'upper', 'zfill']
>>> help(str.split)
Help on method_descriptor:

split(...)
    S.split(sep=None, maxsplit=-1) -> list of strings

    Return a list of the words in S, using sep as the
    delimiter string.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator and empty strings are
    removed from the result.

>>> "a:b:c".split(":")
['a', 'b', 'c']
>>> s
'Hello World'
>>> s.split()
['Hello', 'World']
>>> len(s)  #NO s.len()
11
>>> help(str.strip)
Help on method_descriptor:

strip(...)
    S.strip([chars]) -> str

    Return a copy of the string S with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.

>>> s = "  a|b|c"
>>> out=["a", "b", "c"]
>>> s.strip().split("|")
['a', 'b', 'c']
>>> lst = [1,"OK", 2.3, [1,3,4]]
>>> type(lst)
<class 'list'>
>>> el = []
>>> type(el)
<class 'list'>
>>> len(lst)
4
>>> lst[0]
1
>>> lst[-1]
[1, 3, 4]
>>> lst[-1] = 30
>>> lst
[1, 'OK', 2.3, 30]
>>> "OK" in lst
True
>>> "OK" not in lst
False
>>> lst == [1]
False
>>> lst != [1]
True
>>> for e in lst:
...     print(e)
...
1
OK
2.3
30
>>> lst[::2]
[1, 2.3]
>>> for e in lst[::2]:
...     print(e)
...
1
2.3
>>> lst
[1, 'OK', 2.3, 30]
>>> lst[0] = 2
>>> lst
[2, 'OK', 2.3, 30]
>>> [1,2,3,4]
[1, 2, 3, 4]
>>> for e in [1,2,3,4]:
...     print(e)
...
1
2
3
4
>>> [1,1,1]
[1, 1, 1]
>>> for e in [4,5,1,2]:
...     print(e)
...
4
5
1
2
>>> lst
[2, 'OK', 2.3, 30]
>>> lst2 = lst + [20,30]
>>> lst2
[2, 'OK', 2.3, 30, 20, 30]
>>> lst
[2, 'OK', 2.3, 30]
>>> lst.append(30)
>>> lst
[2, 'OK', 2.3, 30, 30]
>>> lst += [3,4]
>>> lst
[2, 'OK', 2.3, 30, 30, 3, 4]
>>> lst.append([30,40,50])
>>> lst
[2, 'OK', 2.3, 30, 30, 3, 4, [30, 40, 50]]
>>> lst += [3]
>>> lst
[2, 'OK', 2.3, 30, 30, 3, 4, [30, 40, 50], 3]
>>> lst = [5,2,3,4]
>>> out = [25,4,9,16]
>>>
>>> # Create an empty list
... out = []
>>> # Take each element(e) from lst
... for e in lst:
...     # square it and append to empty list
...     out.append(e*e)
...
>>> print(out)
[25, 4, 9, 16]
>>>
>>>
>>>
>>>
>>>
>>>
>>> input = "[1,2,3,4]"
>>> output = [1,2,3,4]
>>>
>>> #strip input with "[]" and then split with ","and store into s2
... s1 = input.strip("[]")
>>> s2 = s1.split(",")
>>> output = []
>>> for e in s2:
...     output.append(int(e))
...
>>> print(output)
[1, 2, 3, 4]
>>>
>>>
>>> lst = [1,2,3]
>>> lst[0]
1
>>> lst[::-1]
[3, 2, 1]
>>> lst[::2]
[1, 3]
>>>
>>>
>>> lst
[1, 2, 3]
>>> lst[:0] = [20,30]
>>> lst
[20, 30, 1, 2, 3]
>>> lst[len(lst):] = [34,35]
>>> lst
[20, 30, 1, 2, 3, 34, 35]
>>> lst[2:2] = [67,68]
>>> lst
[20, 30, 67, 68, 1, 2, 3, 34, 35]
>>> lst[0:4] = [99]
>>> lst
[99, 1, 2, 3, 34, 35]
>>> lst[-1] = 50
>>> lst
[99, 1, 2, 3, 34, 50]
>>> lst = [20, 30, 1, 2, 3, 34, 35]
>>> lst[2:2]
[]
>>> lst[2:3]
[1]
>>> lst = [20, 30, 67, 68, 1, 2, 3, 34, 35]
>>> lst[0:4]
[20, 30, 67, 68]
>>>
>>>
>>> lst = [1,2,3]
>>> c = 0
>>> while c < 2:
...     lst = [lst]
...     c += 1
...
>>> lst
[[[1, 2, 3]]]
>>> lst = [1,2,3]
>>> c = 0
>>> lst = [lst]
>>> lst
[[1, 2, 3]]
>>> lst = [lst]
>>> lst
[[[1, 2, 3]]]
>>> type(lst)
<class 'list'>
>>> len(lst)
1
>>> type(lst[0])
<class 'list'>
>>> [[[1, 2, 30]]]
[[[1, 2, 30]]]
>>> lst
[[[1, 2, 3]]]
>>> lst[0]
[[1, 2, 3]]
>>> lst[0][0]
[1, 2, 3]
>>> lst[0][0][-1]
3
>>> lst[0][0][-1] = 30
>>> lst
[[[1, 2, 30]]]
>>>
>>> dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__'
, '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__'
, '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__'
, '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_e
x__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__s
izeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'ex
tend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> l1 = [1,2,3]
>>> ll = [l1, l1,l1]
>>> ll
[[1, 2, 3], [1, 2, 3], [1, 2, 3]]
>>> ll[-1][-1] = 30
>>> ll
[[1, 2, 30], [1, 2, 30], [1, 2, 30]]
>>> l1
[1, 2, 30]
>>> l1 = [1,2,3]
>>> ll = [l1.copy(), l1[:],l1[:]]
>>> ll[-1][-1] = 30
>>> ll
[[1, 2, 3], [1, 2, 3], [1, 2, 30]]
>>> l1
[1, 2, 3]
>>> l1 = [1,2,3]
>>> ll = [tuple(l1), tuple(l1)]
>>> ll
[(1, 2, 3), (1, 2, 3)]
>>> ll[-1][-1] = 30
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> list(tuple([1,2,3]))
[1, 2, 3]
>>> t = (1,2,3,4)
>>> type(t)
<class 'tuple'>
>>> et = ()
>>> type(et)
<class 'tuple'>
>>> len(t)
4
>>> 4 in t
True
>>> t == (1,2,3,4)
True
>>> for e in t:
...     print(e)
...
1
2
3
4
>>>
>>> t[0]
1
>>> t[0] = 20
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> t
(1, 2, 3, 4)
>>> t.append(30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'
>>> t2 = t + (3,4,5)
>>> t2
(1, 2, 3, 4, 3, 4, 5)
>>> t
(1, 2, 3, 4)
>>> dir(tuple)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__'
, '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__
rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'i
ndex']
>>> quit()

D:\PPT\python\hands>

































































































































